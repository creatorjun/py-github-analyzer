[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "py-github-analyzer"
version = "1.4.2"
description = "High-performance async GitHub repository analyzer with AI-optimized code extraction and smart .env file support"
authors = [
    {name = "Han Jun-hee", email = "createbrain2heart@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["github", "analyzer", "code", "repository", "ai", "async", "dotenv", "env"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License", 
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Text Processing :: General",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Framework :: AsyncIO",
    "Environment :: Console"
]
requires-python = ">=3.8"
dependencies = [
    "httpx>=0.24.0",
    "aiofiles>=0.8.0",
    "rich>=13.0.0",
    "requests>=2.28.0",
    "python-dotenv>=1.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.0.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "types-requests>=2.31.0",
    "bandit>=1.7.5",
    "build>=0.10.0",
    "twine>=4.0.2",
    "pre-commit>=3.0.0",
    "safety>=2.3.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.0.0"
]
lint = [
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5"
]

[project.urls]
Homepage = "https://github.com/creatorjun/py-github-analyzer"
Repository = "https://github.com/creatorjun/py-github-analyzer"
Documentation = "https://github.com/creatorjun/py-github-analyzer#readme"
"Bug Reports" = "https://github.com/creatorjun/py-github-analyzer/issues"

[project.scripts]
py-github-analyzer = "py_github_analyzer.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["py_github_analyzer*"]
exclude = ["tests*", "test_*"]

[tool.setuptools.package-data]
py_github_analyzer = ["*.json", "*.txt"]

# ==================================================
# Code formatting and linting
# ==================================================

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["py_github_analyzer", "tests"]
known_first_party = ["py_github_analyzer"]
skip_glob = ["**/__pycache__/**", "**/build/**", "**/dist/**"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

exclude = [
    "^build/",
    "^dist/",
]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["httpx.*", "rich.*", "aiofiles.*", "dotenv.*"]
ignore_missing_imports = true

# ==================================================
# Testing configuration
# ==================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=py_github_analyzer",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, may need external resources)",
    "async_test: Tests that use async/await",
    "slow: Tests that take longer to run",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["py_github_analyzer"]
branch = true
parallel = true
omit = [
    "tests/*",
    "*/tests/*",
    "setup.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ==================================================
# Security and quality checks
# ==================================================

[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", "venv"]
skips = ["B101"]  # assert_used (we use assert in tests)

[tool.bandit.assert_used]
exclude = ["*test*.py", "*conftest*.py"]

# ==================================================
# Flake8 configuration (via flake8 command)
# Note: flake8 doesn't support pyproject.toml natively
# but this is for documentation. Use setup.cfg or .flake8 file for actual config
# ==================================================

# For reference - actual flake8 config should go in setup.cfg or .flake8:
# [flake8]
# max-line-length = 88
# max-complexity = 10
# exclude = .git,__pycache__,.venv,venv,.eggs,*.egg,dist,build,docs,.tox,.mypy_cache,.pytest_cache
# ignore = E203,E501,W503
# per-file-ignores = __init__.py:F401,tests/*:S101,S105,S106

# ==================================================
# Build and distribution
# ==================================================

[tool.setuptools]
zip-safe = false

[tool.setuptools.dynamic]
# If you want to use dynamic versioning later
# version = {attr = "py_github_analyzer.__version__"}

# ==================================================
# Development tools (optional)
# ==================================================

# Pre-commit configuration reference
# Create .pre-commit-config.yaml separately for actual pre-commit setup

# Ruff (alternative to flake8 + isort + some mypy checks)
[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "Q",   # flake8-quotes
]
ignore = [
    "E501",  # Line too long (handled by formatter)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
    "dist",
    "build",
    "docs",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["S101"]      # assert usage in tests

[tool.ruff.isort]
known-first-party = ["py_github_analyzer"]
